version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: privacy-jenga-postgres
    environment:
      POSTGRES_DB: privacy_jenga
      POSTGRES_USER: privacy_jenga_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - privacy-jenga-network
    restart: unless-stopped

  # Redis for caching and Socket.IO scaling
  redis:
    image: redis:7-alpine
    container_name: privacy-jenga-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - privacy-jenga-network
    restart: unless-stopped

  # API Server
  api:
    build:
      context: ../../services/api
      dockerfile: Dockerfile
    container_name: privacy-jenga-api
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3001
      DATABASE_URL: postgresql://privacy_jenga_user:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/privacy_jenga
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379
      CLIENT_URL: ${CLIENT_URL:-http://localhost:5173}
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_here}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
    networks:
      - privacy-jenga-network
    restart: unless-stopped
    volumes:
      - ../../services/api:/app
      - /app/node_modules

  # Web Client
  web:
    build:
      context: ../../apps/web
      dockerfile: Dockerfile
    container_name: privacy-jenga-web
    environment:
      VITE_API_URL: ${API_URL:-http://localhost:3001}
      VITE_WS_URL: ${WS_URL:-ws://localhost:3001}
    ports:
      - "5173:80"
    depends_on:
      - api
    networks:
      - privacy-jenga-network
    restart: unless-stopped

  # Admin Panel
  admin:
    build:
      context: ../../apps/admin
      dockerfile: Dockerfile
    container_name: privacy-jenga-admin
    environment:
      VITE_API_URL: ${API_URL:-http://localhost:3001}
      VITE_ADMIN_SECRET: ${ADMIN_SECRET:-admin_secret_123}
    ports:
      - "3002:80"
    depends_on:
      - api
    networks:
      - privacy-jenga-network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: privacy-jenga-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
      - api
      - admin
    networks:
      - privacy-jenga-network
    restart: unless-stopped

  # Monitoring Stack (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: privacy-jenga-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - privacy-jenga-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: privacy-jenga-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - privacy-jenga-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  privacy-jenga-network:
    driver: bridge
